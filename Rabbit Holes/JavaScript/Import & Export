the import statement is used to import bindings which are exported by another module

Syntax
  import defaultExport from "module-name";
  import * as name from "module-name";
  import { export } from "module-name";
  import { export as alias } from "module-name";
  import { export1 , export2 } from "module-name";
  import { export1 , export2 as alias2 , [...] } from "module-name";
  import defaultExport, { export [ , [...] ] } from "module-name";
  import defaultExport, * as name from "module-name";
  import "module-name";

the export statement is used when creating JS modules to export functions, objects, or primitive values from the module so they can be used by other programs with the `import` statement

Syntax
  export { name1, name2, …, nameN };
  export { variable1 as name1, variable2 as name2, …, nameN };
  export let name1, name2, …, nameN; // also var
  export let name1 = …, name2 = …, …, nameN; // also var, const
  export function FunctionName(){...}
  export class ClassName {...}

  export default expression;
  export default function (…) { … } // also class, function*
  export default function name1(…) { … } // also class, function*
  export { name1 as default, … };

  export * from …;
  export { name1, name2, …, nameN } from …;
  export { import1 as name1, import2 as name2, …, nameN } from …;
  export { default } from …;

There are 4 Types of Exports
  1) Named (several per module)
  2) Default (one per module)
  3) Mixed Named/Default Exports
  4) Cyclical Dependencies
