"Getting a job can itself be a full-time job."

Strategy
1) Figure out Needs/Skills
2) Figure out Companies Needs/Offers
3) Lay Groundwork Early
4) Collect Job Leads
5) Qualify Job Leads
6) Reach Out & Apply
7) Interview
8) Handle the Offer(s)


Strategy: Blog Post
1) Build Assets that make you Hireable
2) Gather Data on Job Openings to assess Market
3) Prioritize the Leads based on personal Criteria
4) Apply to the most attractive Leads with a CV and Covering Letter
5) Prepare for and give a good Interview
6) Make a decision with three offers in hand

1) Build Hireable Assets
	Social Proof:
		A) Starter job for work epxerience on resume
		B) Attend meetups

	Technical Depth:
		Know what I don't know

	Technical Skill:
		Practice

	More Blog Posts -- Ideally all on one page -- the landing page

2) Collect Leads

	Use a Lead organization system
		Name of Company
		Contact Information
		URL to Job Listing

	Sources:
		Personal network
		Direct applications
		Job Boards (meh, but ideally, technical job boards)
		Recruiters

	Don't apply straight away, collect a large amount of leads to gauge the technical employment market

3) Qualify Leads
	
	Probability of Offer?
	Will skills/knowledge increase in appropriate direction?
	Sufficient pay?
	Is the job stable enough?
	Will I be productive?

	Add/remove questions as necessary to personal criteria

	Remove leads that have no chance of meeting your criteria, but don't rule out too many, just the obvious ones
	(as it can be difficult to assess suitability without an in-person meeting)

4) Apply
	
	For every lead, apply with a CV and a short email

	CV should highlight your 'hireable assets' (see above)
		Technical Depth/Skill - list technologies worked with and can reason about (should be confident)
		Social Proof - references and experience
		Working Software - link to working applications

	2-5 examples of each of the above
	Customize it to specific job descriptions

	Write a covering email, highlighting suitability
		Don't ignore a major requirement! Address the shortcoming and highlight ability/will to learn fast and not be a burden on your future team


		Hi Alice,

		I'm Bob, a web developer currently available for full-time employment.

		According to your company website, you're currently hiring web developers. Based on the information outlined there, I believe I would make a good addition to your team.

		You might notice that I don't have any commercial experience, so I would be applying to this role as a junior developer. While I've never worked as a full-time web developer before, I'm proficient with many of the technologies listed in your requirements, have deployed working software and believe I would contribute value to your development team from day one.

		Please find attached my CV with links to code samples and projects that demonstrate my abilities. Additionally, you can see my profile on github here: http://github.com/example-example-example

		It would be great to meet for a chat at some point if you have any interest in taking this further.

		Kind Regards,

		-Bob, http://bobthewebdeveloper.example.com/

	For each application, log the date applied in your organization system
		send a follow-up email a number of days later (3 days, 1 week, and 2 weeks before giving up)

	Take time with each application

	Try to learn from rejections

5) Interview well

	Interviews contain:
		non-technical questions for you
			write a list of possible questions, and prepare answers
			bring notebook to interview
		questions for them
			company and their goals
			working conditions, technologies, process, and culture
			collect data through some research, write some questions to be prepared

			examples:
				Tell me about some software you have delivered recently.
				How do you measure your software's impact?
				Are you profitable?
				Why are you hiring developers now?
				How is developer time spread between maintenance and building new features?
				What is your technology stack/architecture?
				How do you organize developer work? What is your development process?
				What is your stance on documentation, testing, and code reviews?
				What major projects are you guys working on?
				What is the motivation behind those projects?
				I see you are using {tech} for {something}, what made you choose it? Do you like it?
				How much downtime have you experienced? How would you handle it going down right now?
				Do you have automated acceptance tests and dedicated QA?
				Does the development team get time to improve the quality of the software?

			and company-specific questions
				
		technical challenges to complete
			If you completely lack the knowledge/skill to tackle a problem, come clean. Don't bullshit through it.
			Research later.

			If you can solve the problem, but need help/documentation, tell the interviewer what you are not clear on, and work through it with them.

			Bring your own laptop(?)
			Be honest about skills
			Take a break if necessary
			Confirm assumptions with interviewers

			Follow-up and ask for feedback

6) Compare Offers
	multiple offers give you more confidence
	getting more offers teaches you more

	be careful not to accept the first offer made 
		avouid high-pressure tactics