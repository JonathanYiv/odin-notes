Due to the multi-paradigm nature of JavaScript allowing users to do things in many different ways, a large variety of design patterns that inform the way you write/design your code have arisen.

(Note: I learned ruby first -- which is a substantially more opinionated language compared to JavaScript. Ruby has classes and you use them. In JavaScript, everything is an object (including classes) -- making things much more flexible.)

Officially built into the language is the constructor function and syntactic sugar of the ES6 classes, which both create objects and make use of prototypes the same way.

Due to some drawbacks of their functionality, other prevalent design patterns have arisen like the module pattern and factory functions.

There are many other design patterns, such as the Sub/Pub and Observer patterns, out there.
Understanding and being able to use a few well is necessary to excelling in JavaScript.
Being able to recognize and identify other design patterns is also necessary.

However, learning them all simultaneously and deciding between which to pick can cause confusion unless extremely experienced and knowledgeable about the advantages and disadvantages of each.

Let's take some of the previously mentioned design patterns for creating objects and look at them, mostly for my own comprehension:
1. Constructor Function
2. ES6 Classes
3. Factory Functions
4. Module Pattern

Please take note that options 1-3 each store methods on a shared prototype and optionally support private data via constructor function closures.
They have the same features for the most part and could mostly be used interchangeably
.
There are some advantages/disadvantages to each, and generally Factory Functions are favored.

Option 4 is the revealing module pattern which is good for namespacing and modularizing code. An alternative to the module pattern could be the ES6 Modules which involve importing/exporting code.

# Constructor Function
function ConstructorCar() {}

ConstructorCar.prototype.drive = function() {
  console.log('Vroom!');
}

const car = new ConstructorCar();
car.drive();

# Class
class ClassCar {
  drive() {
    console.log('Vroom!');
  }
}

const car = new ClassCar();
car.drive();

# Factory
const proto = {
  drive() {
    console.log('Vroom!');
  }
};

function factoryCar() {
  return Object.create(proto);
}

const car = factoryCar();
car.drive();

# Module Pattern
var ModuleName = (function() {
  var privateMethod = function() {
    ...
  };

  var someMethod = function() {
    ...
  };

  var anotherMethod = function() {
    ...
  };

  return {
    someMethod: someMethod,
    anotherMethod: anotherMethod
  }
})();

