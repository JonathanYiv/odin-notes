Learning Outcomes
  What is the DOM?
    the Document Object Model
    generated by the browser when given HTML
    every element becomes an object that has parent(s) and possibly children

  How do elements get placed in the DOM by default?
    in order

  How can you override element positioning using the position attribute?
    for nonstatic position property, you can use the offset properties

  When are you able to use the top, left, right, and bottom attributes?
    for nonstatically positioned elements

  What is the difference between float and position?
    they are both different techniques with different yet similar rulesets for positioning elements on a page
    floats can either be to the left or right or not exist and requires a clearfix for elements to stack appropriately
    positions can vary widely, but generally have offset properties and require knowledge of what coordinate systems are created by itself and parent elements

  Which element acts as the parent for a floated element?
    whatever is written in the HTML

  What is the difference between floating left and floating right?
    moves to left vs right most boundary of its parent element

  If you have a bunch of elements floated next to each other and you make the browser narrower, what happens?
    they wrap to new lines

  What's the practical difference between relative and absolute positioning?
    relatively positioned elements are in the normal flow
    absolutely positioned elements are NOT in the normal flow

  Which element acts as the parent for an absolutely or relatively positioned element?
    whatever is written

  How would you set up a grid of 20x20 boxes on the page using floats? Using lists?
    For floats: set up a container and have all 400 boxes float into one direction
    ensure the container is the appropriate size to make it a grid

    for lists, change li elements to inline-block

  What are negative margins useful for?
    when a static element is given a negative margin
      on the top/left - it pulls the element in that direction
      on the bottom/right - pulls any succeeding element into the main element, overlapping it
      if no width is applied, on the left/right, pulls the element in both directions increasing its width

Floats
  a box shifted to the left or right on the current line
  content may flow along the side opposite to its float (or be prohibited by using the clear property)

  float: left|right|inherit|none;
    left
      element will move to left-most boundary of its parent element
    right
      element will move to right-most boundary of its parent element
    inherit
      inherits the float value of its parent element
    none (default)
      no float

  Normal Flow
    block elements stack on top of each other vertically

    floated elements are first laid out according to the normal flow, then taking out and sent to the right/left
    of the parent element, stacking next to each other, given there is enough room in the parent element

  Clear
    elements following a floated element will behave contrary to what you expect
    because the floated element has been removed from the normal flow and doesn't 'exist'
    clearing the subsequent element allows it to act as if the floated element is 'in the normal flow'

    clear: left|right|both|inherit|none
      left
        the top edge of this element must sit below any element that is float:left
      right
        the top edge of this element must sit below any element that is float:right
      both
        top edge must sit below any element that is floated left or right
      inherit
        takes on clear property from its parent
      none
        no clear

    note: the order with which you arrange elements MATTER
          FLOAT FIRST in the markup, before any non-floated elements that the float will interact with

  Collapsing
    when a parent element with any # of floated elements doesn't expand to completely surround those elements in the way it would if the elements were not floated
    this is expected and proper behavior because floated elements are removed from the normal flow

    Fixes
      1) place an element with the clear property after the floated element, like a div (requires html, less sexy)
      2) The Clearfix Hack
         overflow: hidden
         allows a parent element to clear itself of any floated elements inside it
         not the intentional use, can cause some hiding content issues or unwanted scrollbars
      3) Modern Clearfix Hack
         .clearfix:after
           content: " ";
           display: block;
           clear: both;

          places a new element inside container after existing content with invisible content, no height, and both cleared
      4) A floated element will expand to contain any floated elements that descend from it

CSS Positioning
  position: static|relative|absolute|fixed|inherit;

  each property serves a specific purpose. UNDERSTAND THAT PURPOSE

  'normal flow' is the law of gravity for how elements stack on top of each other

  position: static; (default)
    the element obeys the laws of normal flow
    top/right/bottom/left are UNAVAILABLE

  position: relative;
    behave like statically positioned elements -- obeys the laws of normal flow
    top/right/bottom/left ARE AVAILABLE
    objects will fall in normal flow, then modify their position relative to that position with the offset top/right/bottom/left properties, WITHOUT affecting the following elements

    creates a coordinate system relative to its position

  position: absolute;
    an absolutely positioned element is REMOVED from the normal flow
    it can NOT be affected or affect any other element in the flow
    responds to offset properties top/right/left/bottom

    creates a coordinate system relative to its PARENT

  position: fixed;
    all the rules of an absolutely positioned element
    responds to offset properties
    the viewport positions the fixed element, OPPOSED TO THE PARENT
    the element itself STAYS fixed

  position: sticky;
    toggles between relative and fixed, depending on the scroll position
    positioned relative until a given offset position is met in the viewport, then it 'sticks' in place

  the reason sometimes the parent must be relative, and the child absolute
  is because of the coordinate system that is created
  you want to position the element relative to another element

  note: the z-index property specifies the stack order of an element


Absolute Vertical Centering
  requires a declared height
  and these styles
    margin: auto;
    position: absolute;
    top: 0; left: 0; bottom: 0; right: 0;
